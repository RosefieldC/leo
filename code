#!/usr/bin/env python3
import os
import socket
from multiprocessing import Process

TAM_MSG = 1024  # Tamanho do bloco de mensagem
HOST = '0.0.0.0'  # Escuta em todas as interfaces
PORT = 40000  # Porta de comunicação

def processa_comando(msg, con, cliente, dir_trabalho):
    """
    Processa um comando recebido de um cliente e retorna o status da conexão.
    """
    msg = msg.decode().strip()
    print(f'Cliente {cliente} enviou: {msg}')
    comandos = msg.split()
    comando = comandos[0].upper() if comandos else ""

    if comando == 'LS':  # Lista arquivos no diretório atual
        try:
            arquivos = os.listdir(dir_trabalho)
            con.send(str.encode(f'+OK {len(arquivos)}\n'))
            for arquivo in arquivos:
                caminho = os.path.join(dir_trabalho, arquivo)
                if os.path.isfile(caminho):
                    tamanho = os.path.getsize(caminho)
                    con.send(str.encode(f'arq: {arquivo} - {tamanho / 1024:.1f}KB\n'))
                elif os.path.isdir(caminho):
                    con.send(str.encode(f'dir: {arquivo}\n'))
                else:
                    con.send(str.encode(f'esp: {arquivo}\n'))
        except Exception as e:
            con.send(str.encode(f'-ERR {e}\n'))

    elif comando == 'GET':  # Envia um arquivo para o cliente
        if len(comandos) < 2:
            con.send(str.encode('-ERR Missing file name\n'))
        else:
            arquivo = os.path.join(dir_trabalho, comandos[1])
            try:
                with open(arquivo, 'rb') as f:
                    tamanho = os.path.getsize(arquivo)
                    con.send(str.encode(f'+OK {tamanho}\n'))
                    while chunk := f.read(TAM_MSG):
                        con.send(chunk)
            except Exception as e:
                con.send(str.encode(f'-ERR {e}\n'))

    elif comando == 'CWD':  # Muda o diretório de trabalho
        if len(comandos) < 2:
            con.send(str.encode('-ERR Missing directory\n'))
        else:
            novo_dir = os.path.join(dir_trabalho, comandos[1])
            if os.path.isdir(novo_dir):
                dir_trabalho = novo_dir
                con.send(str.encode(f'+OK {novo_dir}\n'))
            else:
                con.send(str.encode(f'-ERR Directory not found: {novo_dir}\n'))

    elif comando == 'EXIT':  # Encerra a conexão
        con.send(str.encode('+OK Goodbye\n'))
        return False, dir_trabalho

    else:
        con.send(str.encode('-ERR Invalid command\n'))

    return True, dir_trabalho

def trata_cliente(con, cliente):
    """
    Lida com a conexão de um cliente, processando os comandos.
    """
    dir_trabalho = os.getcwd()  # Diretório inicial do cliente
    print(f"Cliente conectado: {cliente}")

    while True:
        try:
            msg = con.recv(TAM_MSG)
            if not msg:
                break
            continuar, dir_trabalho = processa_comando(msg, con, cliente, dir_trabalho)
            if not continuar:
                break
        except Exception as e:
            print(f"Erro com o cliente {cliente}: {e}")
            break

    con.close()
    print(f"Cliente desconectado: {cliente}")

def main():
    """
    Inicia o servidor e gerencia conexões múltiplas usando multiprocessing.
    """
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.bind((HOST, PORT))
    sock.listen(50)
    print(f"Servidor BTP rodando em {HOST}:{PORT}")

    while True:
        try:
            con, cliente = sock.accept()
            print(f"Nova conexão: {cliente}")
            # Processa cada cliente em um processo separado
            p = Process(target=trata_cliente, args=(con, cliente))
            p.start()
        except KeyboardInterrupt:
            print("\nServidor encerrado.")
            break
        except Exception as e:
            print(f"Erro no servidor: {e}")
            break

    sock.close()

if __name__ == '__main__':
    main()
